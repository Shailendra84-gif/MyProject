const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const app = express();
const port = process.env.PORT || 5000;

app.use(cors());
app.use(express.json());

// MongoDB connection
const uri = process.env.MONGODB_URI || 'mongodb://localhost:27017/updateManager';
mongoose.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('MongoDB connected'))
  .catch(err => console.error('MongoDB connection error:', err));

// Update Schema
const updateSchema = new mongoose.Schema({
  title: String,
  date: Date,
  description: String,
  headers: [String],
  relatedUpdate: { type: mongoose.Schema.Types.ObjectId, ref: 'Update' }
});

// Reminder Schema
const reminderSchema = new mongoose.Schema({
  text: String,
  date: Date
});

// To-Do Schema
const todoSchema = new mongoose.Schema({
  text: String,
  completed: Boolean
});

const Update = mongoose.model('Update', updateSchema);
const Reminder = mongoose.model('Reminder', reminderSchema);
const Todo = mongoose.model('Todo', todoSchema);

// Routes
app.get('/api/updates', async (req, res) => {
  const updates = await Update.find().populate('relatedUpdate');
  res.json(updates);
});

app.post('/api/updates', async (req, res) => {
  const update = new Update(req.body);
  await update.save();
  res.json(update);
});

app.put('/api/updates/:id', async (req, res) => {
  const update = await Update.findByIdAndUpdate(req.params.id, req.body, { new: true });
  res.json(update);
});

app.delete('/api/updates/:id', async (req, res) => {
  await Update.findByIdAndDelete(req.params.id);
  res.sendStatus(200);
});

app.get('/api/reminders', async (req, res) => {
  const reminders = await Reminder.find();
  res.json(reminders);
});

app.post('/api/reminders', async (req, res) => {
  const reminder = new Reminder(req.body);
  await reminder.save();
  res.json(reminder);
});

app.get('/api/todos', async (req, res) => {
  const todos = await Todo.find();
  res.json(todos);
});

app.post('/api/todos', async (req, res) => {
  const todo = new Todo(req.body);
  await todo.save();
  res.json(todo);
});

app.put('/api/todos/:id', async (req, res) => {
  const todo = await Todo.findByIdAndUpdate(req.params.id, req.body, { new: true });
  res.json(todo);
});

app.listen(port, () => console.log(`Server running on port ${port}`));
